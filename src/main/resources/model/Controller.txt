package com.basic.ofc.facade.impl;

import #basePackage#.domain.#className#;
import #basePackage#.domain.example.#className#Example;
import #basePackage#.facade.api.#className#Facade;
import #basePackage#.facade.api.dto.#className#Req;
import #basePackage#.facade.api.dto.#className#Resp;

import #basePackage#.facade.api.dto.Update#className#Req;
import #basePackage#.facade.impl.convert.#className#Convert;
import #basePackage#.service.api.#className#Service;
import com.nicetuan.basic.common.bean.CommonResultCode;
import com.nicetuan.basic.common.bean.Response;
import com.nicetuan.basic.common.bean.util.ResponseUtils;
import com.nicetuan.basic.common.util.CollectionUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 * #tableComment#
 */
@RestController
@Slf4j
@Api(value = "#alias#",tags = {"十荟团#tableComment#接口"})
public class #className#Controller implements #className#Facade {
    @Autowired
    private #className#Service #alias#Service;

    @ApiOperation(value = "分页查询#tableComment#", notes = "分页查询#tableComment#")
    @ApiImplicitParam(name = "request", value = "分页查询#tableComment#", required = true, dataType = "#className#Req", paramType = "body")
    @PostMapping(value = "/#address#/pageList", consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @Override
    public Response<#className#Resp> pageList(@RequestBody #className#Req request) {
        request.setOffset((request.getP() - 1) * request.getSize());
        #className#Example #alias#Example = #className#Convert.requestToExample(request);
        List<#className#> resultList = #alias#Service.get#className#ListForPage(#alias#Example);
        #className#Resp #alias#Resp = new #className#Resp();
        #alias#Resp.setDataList(#className#Convert.domainToRespList(resultList));
        #alias#Resp.setCount(#alias#Service.get#className#ListCount(#alias#Example));
        return ResponseUtils.createSuccess(#alias#Resp);
    }

    @PostMapping(value = "/#address#/pageCount", consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Response<Integer> pageCount(@RequestBody #className#Req request) {
        #className#Example #alias#Example = #className#Convert.requestToExample(request);
        int count = #alias#Service.get#className#ListCount(#alias#Example);
        return ResponseUtils.createSuccess(count);
    }

    private void addEnumValue(#className#Resp #alias#Resp) {
    }

    @ApiOperation(value = "编辑#tableComment#", notes = "编辑#tableComment#，跳转时调用")
    @ApiImplicitParam(name = "request", value = "编辑#tableComment#", required = true, dataType = "Edit#className#Req", paramType = "body")
    @ResponseBody
    @PostMapping(value = "/#address#/getById", consumes = MediaType.APPLICATION_JSON_VALUE)
    @Override
    public Response<#className#Resp> get#className#ByForEdit(@RequestBody Edit#className#Req request) {
        #className#Example #alias#Example = #className#Convert.editReqToExample(request);
        List<#className#> #alias#List = #alias#Service.get#className#ById(#alias#Example);
        #className#Resp #alias#Resp = new #className#Resp();
        #alias#Resp.setDataList(#className#Convert.domainToRespList(#alias#List));
        addEnumValue(#alias#Resp);
        return ResponseUtils.createSuccess(#alias#Resp);
    }

    @ApiOperation(value = "页面查询条件", notes = "页面查询条件，列表新增保存同用")
    @ApiImplicitParam(name = "request", value = "页面查询条件")
    @ResponseBody
    @PostMapping(value = "/#address#/getQueryCondition", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Response<#className#Resp> getQueryCondition(){
        #className#Resp #alias#Resp = new #className#Resp();
        addEnumValue(#alias#Resp);
        return ResponseUtils.createSuccess(#alias#Resp);
    }

    @ApiOperation(value = "批量新增#tableComment#", notes = "新增#tableComment#，保存时调用")
    @ApiImplicitParam(name = "request", value = "批量新增#tableComment#", required = true, dataType = "Edit#className#Req", paramType = "body")
    @ResponseBody
    @PostMapping(value = "/#address#/save-all", consumes = MediaType.APPLICATION_JSON_VALUE)
    @Override
    public Response saveAll(@RequestBody List<Update#className#Req> requestList) {
        #alias#Service.saveAll#className#(#className#Convert.updateReqToDomainList(requestList));
        return ResponseUtils.create(CommonResultCode.SUCCESS,"新增#tableComment#成功！");
    }

    @ResponseBody
    @PostMapping(value = "/#alias#/save", consumes = MediaType.APPLICATION_JSON_VALUE)
    @Override
    public Response save(@RequestBody Update#className#Req request) {
        #alias#Service.insert#className#(#className#Convert.updateReqToDomain(request));
        return ResponseUtils.create(CommonResultCode.SUCCESS,"更新新#tableComment#成功！");
    }

}
